==================
План первой лекции
==================

Первая часть
------------

Обзор что такое Python и где его используют (45-55 минут + вопросы = 65--90
минут).

Что такое Python? 
~~~~~~~~~~~~~~~~~

(2 минуты)

Python --- язык программирования (ЯП)

Стоит ли объяснять что такое ЯП? 
Пока я планирую только привести пример кода программы из 5 строк, которая 
что-то выводит и сказать: вот код, а вот результат её работы --- она делает 
то, что вы указали ей делать.

Характеристики Python как ЯП 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(15-25 минут)

Здесь _можно_ кратко рассказать о классификации языков вообще (вроде
категорий ООП/функциональные, компилируемые/интерпретируемые и т.п.), в чем
отличие, зачем что нужно и к какой категории относится Python. Но я думаю,
что это отвлечет от основной темы лекции, хотя без таких объяснений сложно
будет понять чем по сути отличается Python от C++ и других языков.

Я предлагаю перечислить особенности Python и показать как они выражаются в
коде и процессе его выполнения. Возможно пару слов устно сказать о других
языках, в основном сравнивая с С++, раз некоторые ребята его изучали. Это
будет обзор без детального объяснения.

Python:

* Высокоуровневый ЯП.

  Процессоры на самом деле выполняют машинные команды, которые числами
  записаны в оперативной памяти. Команды там следующего вида: "помести в
  регистр процессора содержимое ячейки памяти номер...", "сложи содержимое
  двух регистров процессора".

  Работа с жестким диском, дисплеем или другими устройствами ввода/вывода в
  машинных командах --- это кропотливая работа, требующая написания сотен и
  тысяч машинных команд. Написание программ в машинных кодах или их
  мнемониках --- это низкоуровневое программирование. Для него существуют
  специальные низкоуровневые языки программирования --- ассемблеры.  
  
  Большинство разработчиках пишут программы на высокоуровневых ЯП, в которых
  команды представляют собой высокоуровневые операции, вроде "вычисли
  выражение 3 + 2^pi", "выведи на экран строку", "прочти содержимое файла".
  Последовательность высокоуровневых команд специальными программами
  (компиляторами или трансляторами) переводятся в последовательность
  низкоуровневых команд, которые уже и выполняются на процессоре компьютера.

  Python --- представитель высокоуровнего языка.

  Пример короткой и простой программы, использующей высокоуровневые
  возможности, например чтение содержимого веб-сайта pogoda.yandex.ru и
  поиск на нём прогноза погоды.

* Ориентированный на разработчика --- быстрая разработка программ
  (прототипирование), лёгкая читаемость кода.

  Программы на Python в 5-10 раз короче программ решающих те же задачи, но
  написанных на C++, и в 3-5 раз короче программ на Java.

  Программы на Python легко читаются, что обусловлено синтаксическими
  конструкциями языка. 
  
  Программы на Python лаконичны, что обусловлено "синтаксическим сахаром",
  большой стандартной библиотекой, в которую включены, например, работа с
  сетью и web, работа с файлами баз данных, архивами, мультипоточность,
  мультипроцессорность, а также встроенными высокоуровневые структуры данных
  (комплексные числа, списки, словари, множества; с помощью сторонних
  модулей становятся доступными матрицы и т.п.)

  Пример легкочитаемых конструкций языка: if, for.

* Интерпретируемый --- не требует компиляции.

  Сразу после написания кода или исправления ошибки программу можно
  запустить и посмотреть на результат.

  Интерактивная консоль.

  Работает значительно медленнее C++, в основном медленнее Java. Самые
  медленные части можно реализовать в виде C/C++ модуля и получить
  необходимую производительность.

* Поддерживает разные парадигмы программирования.

  Python, как язык структурного программирования. Циклы, ветвление
  (примеры).
  
  Python, как язык ООП. Пример класса. Наследовение, полиморфизм,
  инкапсуляция --- без объяснений. 

  Python, как язык функционального программирования: лямбда выражения, list
  comprehension (примеры без объяснения как это работает).

* Динамическая типизация

* Автоматическое управление памятью, сборщик мусора

* Механизм обработки исключений

* Обладает полной интроспекцией

Реализации ЯП Python, дистрибутивы и библиотеки
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(10 минут)

* Реализации и дистрибутивы Python

  CPython (написанный на C), PyPy (написанный на Python), Jython (написанный
  на Java), IronPython (написанный на C#) --- интерпретаторы Python для
  разных платформ и разных целей.

  Большинство интерпретаторов и библиотек под лояльной свободной лицензией
  --- можно использовать в любых целях и даже модифицировать сам язык под
  себя.

  Основная реализация интерпретатора: CPython.

  Язык активно развивается, каждый год выходит новая версия с новыми
  возможностями.

  Сейчас используются в основным две ветки версий языка: 2.* (2.5, 2.6, 2.7)
  и 3.* (3.1, 3.2). 2.* обратно совместимы между собой, также как и 3.*, но
  3.* не обратно совместима с 2.*.

  3.* как язык лучше и продуманней, чем 2.*, но пока работает медленнее 2.*,
  а также далеко не все библиотеки для 2.* портированы для 3.*. Мы будем
  изучать последнюю версию ветки 2.*: Python 2.7.

* Библиотеки

  Существуют Python-интерфейсы для большинства популярных библиотек:

  - 2D и 3D графика, OpenGL, DirectX
  - работа с базами данных
  - работа с мультимедиа: звук, видео, изображения
  - разработка UI: Qt, Gtk, WxWidgets
  
  ...

Зачем он нужен и как он используется
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(10 минут использование, 10 минут примеры.)

TODO: отсортировать в порядке популярности.

- Интерактивная консоль --- мощный "калькулятор" для работы с числами, 
  матрицами, файлами, изображениями, статистического анализа.

- Как ЯП для небольших скриптов

  Масштабировать много изображений с фотоаппарата, применив несколько
  фильтров и обрезав края.
  
  Распарсить веб-страницу и скачать все PDF файлы на которые она ссылается.

  Различные системные скрипты (в Unix-like ОС): hook на установление
  сетевого соединения, скрипт для резервного копирования.

- Как ЯП для прототипирования

  Быстрое создание пользовательского интерфеса будущей программы с 
  неоптимальной реализации функциональности.

  Быстрая реализация и проверка алгоритмов.

- Как ЯП для полноценных программ

  Примеры.

- Как ЯП для построения web-приложений

  Примеры.

- Как встраиваемый язык

  Примеры.

Здесь стоит показать интересные примеры, но я не уверен, что успею их 
подготовить (но могу успеть найти готовые примеры), что-то из:

- Пример использования OpenGL (с шейдерами)
- Пример распознавания лиц или чего-то схожего из компьютерного зрения с
  помощью OpenCV
- Пример диалогового окна с кнопками с PyQt
- Пример работы с матрицами и числами с numpy
- Пример работы в sagemath на встроенном Python
- Пример использования Python в Blender/Maya
- Пример использования Python внутри SQL запроса в БД PostgreSQL
- Пример обработки изображения на Python в GIMP
- Пример работы с GIS данными на Python в ESRI ArcGIS
- Пример веб-приложения гостевой книги на одном из фреймворков (Django)
- Пример реализации модуля для Python на C++ с помощью Boost.Python
- Пример использования Python в системе сборки SCons
- Пример использования Python в системе непрерывной интеграции Buildbot

Вторая часть 
------------

Введение в язык программирования, базовые конструкции,
установка дистрибутива, практика (30--40 минут + вопросы = 60--80 минут)

Введение в Python
~~~~~~~~~~~~~~~~~

(Краткое и простое, на 20 минут.)

- Переменные, ссылки. 
- Числа, строки.
- Форматированный вывод.
- Условные выражения, циклы. Тип данных список.

Установка Python
~~~~~~~~~~~~~~~~

(10 минут)

- Установка дистрибутива Python
- Установка сторонних библиотек с помощью easy_install или pip (встроенные
  пакетные системы для установки библиотек с зависимостями)
- Документация и книги

Простая практика
~~~~~~~~~~~~~~~~

(10-20 минут, если ребята будут сидеть за компьютерами, то дольше)

- Работа с Python в интерактивной консоли
