>>> # Все переменные в Python определяются в каком-то модуле.  Создаваемые в интерактивной консоли переменные кладутся в модуль __main__.
... # Для поиска по имени переменной объекта, на который она ссылается, Python использует специальные словари --- области видимости.
... # Переменные, определяемые на уровне модуля, добавляются в глобальную область видимости.  Переменные, определяемые внутри функции или 
... # класса сохраняются в локальную область видимости.  В любой строчке кода можно получить ссылки на локальную и глобальную область
... # видимости с помощью функций locals() и globals():
... globals() # вернёт словарь, отображающий имена переменных в объекты, на которые они ссылаются
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', '__doc__': None, '__package__': None}
>>> __name__ # имя текущего модуля
'__main__'
>>> # При указании в коде имени переменной, Python ищет имя переменной в областях видимости в следующем порядке: в локальной, в глобальной
... # и во встроенной в Python областях видимости.
... # Имя функции `globals' находится во встроенной области видимости, а имя `__name__' - в глобальной
... # Т.о. доступ к __name__ эквивалентен в этом случае:
... globals()['__name__']
'__main__'
>>> # При написания кода на уровне модуля, локальная область видимости совпадает с глобальной:
... locals() is globals()
True
>>> # Определим переменную. При этом Python добавит в текущую локальную область видимости пару с ключом `имя переменной' и значением объектом.
... a = "test"
>>> locals()
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', '__doc__': None, 'a': 'test', '__package__': None}
>>> # Удалим имя переменной (реальный объект удалится при сборке мусора, но об этом потом):
... del a
>>> locals()
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', '__doc__': None, '__package__': None}
>>> 
