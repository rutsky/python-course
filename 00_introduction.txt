План первой лекции:

Первая часть --- обзор что такое Python и где его используют 
(30 минут + вопросы = 40--60 минут).
 * Что такое Python?

   Python --- язык программирования (ЯП)

   Стоит ли объяснять что такое ЯП? 
   Пока я планирую только привести пример кода программы из 5 строк, которая 
   что-то выводит и сказать: вот код, а вот результат её работы --- она делает 
   то, что вы указали ей делать.

 * Характеристики Python как ЯП. 

   Здесь _можно_ кратко рассказать о классификации языков вообще (вроде
   категорий ООП/функциональные, компилируемые/интерпретируемые и т.п.), в чем
   отличие, зачем что нужно и к какой категории относится Python. Но я думаю,
   что это отвлечет от основной темы лекции, хотя без таких объяснений сложно
   будет понять чем по сути отличается Python от C++ и других языков.

   Я предлагаю перечислить особенности Python и показать как они выражаются в
   коде и процессе его выполнения. Возможно пару слов устно сказать о других
   языках, в основном сравнивая с С++, раз некоторые ребята его изучали. Это
   будет обзор без детального объяснения.

   Python:

   - Высокоуровневый ЯП.
   
     Процессоры на самом деле выполняют машинные команды, которые числами
     записаны в оперативной памяти. Команды там следующего вида: "помести в
     регистр процессора содержимое ячейки памяти номер...", "сложи содержимое
     двух регистров процессора".

     Работа с жестким диском, дисплеем или другими устройствами ввода/вывода в
     машинных командах --- это кропотливая работа, требующая написания сотен и
     тысяч машинных команд. Написание программ в машинных кодах или их
     мнемониках --- это низкоуровневое программирование. Для него существуют
     специальные низкоуровневые языки программирования --- ассемблеры.  
     
     Большинство разработчиках пишут программы на высокоуровневых ЯП, в которых
     команды представляют собой высокоуровневые операции, вроде "вычисли
     выражение 3 + 2^pi", "выведи на экран строку", "прочти содержимое файла".
     Последовательность высокоуровневых команд специальными программами
     (компиляторами или трансляторами) переводятся в последовательность
     низкоуровневых команд, которые уже и выполняются на процессоре компьютера.

     Python --- представитель высокоуровнего языка.

     Пример короткой и простой программы, использующей высокоуровневые
     возможности, например чтение содержимого веб-сайта pogoda.yandex.ru и
     поиск на нём прогноза погоды.

   - Ориентированный на разработчика --- быстрая разработка программ
     (прототипирование), лёгкая читаемость кода.

     Программы на Python в 5-10 раз короче программ решающих те же задачи, но
     написанных на C++, и в 3-5 раз короче программ на Java.

     Программы на Python легко читаются, что обусловлено синтаксическими
     конструкциями языка. 
     
     Программы на Python лаконичны, что обусловлено "синтаксическим сахаром",
     большой стандартной библиотекой, в которую включены, например, работа с
     сетью и web, работа с файлами баз данных, архивами, мультипоточность,
     мультипроцессорность, а также встроенными высокоуровневые структуры данных
     (комплексные числа, списки, словари, множества; с помощью сторонних
     модулей становятся доступными матрицы и т.п.)

     Пример легкочитаемых конструкций языка: if, for.

   - Интерпретируемый --- не требует компиляции.

     Сразу после написания кода или исправления ошибки программу можно
     запустить и посмотреть на результат.

     Интерактивная консоль.

     Работает значительно медленнее C++, в основном медленнее Java. Самые
     медленные части можно реализовать в виде C/C++ модуля и получить
     необходимую производительность.

   - Поддерживает разные парадигмы программирования.
   
     Python, как язык структурного программирования. Циклы, ветвление
     (примеры).
     
     Python, как язык ООП. Пример класса. Наследовение, полиморфизм,
     инкапсуляция --- без объяснений. 

     Python, как язык функционального программирования: лямбда выражения, list
     comprehension (примеры без объяснения как это работает).

   - Динамическая типизация

   - Автоматическое управление памятью, сборщик мусора

   - Механизм обработки исключений

   - Обладает полной интроспекцией

 * Зачем он нужен и как он используется

Вторая часть --- 30 минут + вопросы
 * Введение в Python
 * Установка Python
 * Простая практика
